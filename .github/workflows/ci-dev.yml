name: dev CI

on:
  push:
    branches: [ develop ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: üçÄ checkout submodule
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.SUBMODULE_TOKEN }}
          submodules: true

      - name: üçÄ set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: üçÄ gradle caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: üçÄ grant execute permission for gradlew
        run: chmod +x gradlew

      - name: üçÄ copy submodule properties
        run: ./gradlew copyProperties

      - name: üçÄ Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.DEV_ECR_UPLOAD_ACCESS }}
          aws-secret-access-key: ${{ secrets.DEV_ECR_UPLOAD_SECRET }}
          aws-region: ap-northeast-2

      - name: üçÄ Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: üçÄ Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ secrets.DEV_ECR_REPO_NAME }}
          IMAGE_TAG: latest
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      # TODO at least EB(docker platform)
      - name: üçÄ Deploy to server
        uses: appleboy/ssh-action@master
        id: deploy
        with:
          host: ${{ secrets.PORKO_DEV_EC2_HOST }}
          username: ${{ secrets.PORKO_DEV_EC2_USERNAME }}
          key: ${{ secrets.PORKO_DEV_EC2_PRIVATE_KEY }}
          script: |
            sudo docker login -u AWS -p $(aws ecr get-login-password --region ap-northeast-2) ${{ secrets.DEV_ECR_REPO_URL }}
            aws ecr batch-delete-image --repository-name ${{ secrets.DEV_ECR_REPO_NAME }} --image-ids "$(aws ecr list-images --query 'imageIds[*]' --repository-name ${{ secrets.DEV_ECR_REPO_NAME }} --filter "tagStatus=UNTAGGED")"
            sudo docker-compose down
            sudo docker rm $(docker ps -a -q) 
            sudo docker rmi ${{ secrets.DEV_ECR_REPO_URL }}:$IMAGE_TAG
            sudo docker pull ${{ secrets.DEV_ECR_REPO_URL }}:$IMAGE_TAG
            sudo docker-compose up -d
